Podemos filtrar uma pesquisa na URL. Quando se filtra, pode-se passar os parâmetros que está buscando
pela URI e o resultado retornará filtrado para voce. Para fazer isso, temos que fazer alguns ajustes
no código. A começar no GameResource:

	@GetMapping
	public List<Game> searchByFilter(GameFilter gameFilter) {
		return gameRepository.findAll();
	}
	
A classe GameFilter precisa ser criada para que funcione. Nessa classe os atributos que a compõem
são os atributos que entrarão como filtro:

	public class GameFilter {
		
		private String plataform;
		private String genre;
		
		public String getPlataform() {
			return plataform;
		}
		public void setPlataform(String plataform) {
			this.plataform = plataform;
		}
		public String getGenre() {
			return genre;
		}
		public void setGenre(String genre) {
			this.genre = genre;
		}
	}
	
Também será necessário criar uma classe para realizar a query, ou seja, um "método customizado". Para
isso, será necessário criar uma interface:

	public interface GameRepositoryQuery {

		public List<Game> filter(GameFilter gameFilter);
	
	}
	
E dentro do GameRepository, essa interface será estendida:

	public interface GameRepository extends JpaRepository<Game, Long>, GameRepositoryQuery{

	}
	
A implementação dos métodos do GameRepositoryQuery será feita através de uma outra classe, a 
GameRepositorioImpl:

	public class GameRepositoryImpl implements GameRepositoryQuery {
	
		@PersistenceContext
		private EntityManager manager;
		
		@Override
		public List<Game> filter(GameFilter gameFilter) {
			CriteriaBuilder builder = manager.getCriteriaBuilder();
			CriteriaQuery<Game> criteria = builder.createQuery(Game.class);
			
			Root<Game> root = criteria.from(Game.class);
			
			//create restrictions
			Predicate[] predicates = createRestrictions(gameFilter, builder, root);
			criteria.where(predicates);
			
			
			TypedQuery<Game> query = manager.createQuery(criteria);
			
			return query.getResultList(); 
		}
		
	}
	
A variável manager será utilizada para trabalhar com as consultas do JPA. O CriteriaBuilder quem
vai construir os critérios para a pesquisa. As restrições são adicionadas a partir da variável root.
A lista de Predicates é criada a partir do que foi informado do filtro, visto que ele é totalmente
opcional. Logo depois, precisa-se criar o método createRestrictions:

	private Predicate[] createRestrictions(GameFilter gameFilter, CriteriaBuilder builder, Root<Game> root) {
		
		List<Predicate> predicates = new ArrayList<>();
		
		// where genre like %textext%
		if (!StringUtils.isEmpty(gameFilter.getGenre())) {
			predicates.add(builder.like(builder.lower(root.get(Game_.genre)), "%" + gameFilter.getGenre().toLowerCase() + "%"));
		}
		
		if (gameFilter.getPlataform() != null) {
			predicates.add(builder.like(builder.lower(root.get(Game_.plataform)), "%" + gameFilter.getPlataform().toLowerCase() + "%"));
		}
		
		return predicates.toArray(new Predicate[predicates.size()]);
	}
		
Esse método vai cuidar de "fazer" o SQL statement com o que temos. Antes de criar os métodos no
predicates, é necessário clicar com o botão direito no projeto, Properties > Java Compiler >
Anotation Processing (habilitar os check boxes todos, e dentro do campo "Generated source
directory" escrever "src/main/java") > Factory Path e clicar no botão Add External Jar. Dentro desse,
deve-se ir na sua pasta .m2 (que está dentro do seu usuário) > repository > org > hibernate > 
hibernate-jpamodelgen > 5.0.12.Final > hibernate-jpamodelgen-5.0.12.Final.jar. Caso a pasta do 
hibernate-jpamodelgen, é só adicionar a seguinte dependência no pom.xml da sua applicação e
depois adicionar o jar:

	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-jpamodelgen</artifactId>
	</dependency>
	
Desse modo, suas classes model terão uma classe equivalente com um _ no final (como a Game_) justamente
para não ter que passar manualmente o atributo por String dentro do root.get(). Também é possível passar
o atributo por String, mas para mapeá-lo caso quebre é muito mais complicado. Para fazer com a String,
sem criar classes adicionais, é só usar o seguinte:
	
	predicates.add(builder.like(builder.lower(root.get("genre")), % + gameFilter.getGenre().toLowerCase() + "%"));
	
Por último, é só alterar seu método para que o novo método "filter" entre em ação ao invés do "findAll()":

	@GetMapping
	public List<Game> searchByFilter(GameFilter gameFilter, Pageable pageable) {
		return gameRepository.filter(gameFilter);
	}
	

	